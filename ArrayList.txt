ArrayList in Java
An ArrayList is a part of the Java Collections Framework and is a resizable array implementation of the List interface. It allows for dynamic resizing, meaning that it can grow and shrink as needed when elements are added or removed. This flexibility makes ArrayList a popular choice for storing lists of objects in Java.
Key Features of ArrayList
Dynamic Sizing: Unlike arrays, which have a fixed size, ArrayList can grow and shrink dynamically.
Random Access: Elements can be accessed quickly using their index.
Order Preservation: The order of elements is maintained based on the order of insertion.
Allows Duplicates: An ArrayList can contain duplicate elements.
Basic Operations
Here are some common operations you can perform with an ArrayList:
Adding Elements: Use add() to insert elements.
Accessing Elements: Use get(index) to retrieve an element at a specific index.
Removing Elements: Use remove(index) to delete an element at a specific index.
Iterating Over Elements: You can use loops or iterators to traverse the list.
Checking Size: Use size() to get the number of elements in the list.
Code Example
Hereâ€™s a complete example demonstrating various operations on an ArrayList:
java
import java.util.ArrayList;

public class ArrayListExample {
    public static void main(String[] args) {
        // Step 1: Create an ArrayList
        ArrayList<String> list = new ArrayList<>();

        // Step 2: Add elements to the ArrayList
        list.add("Apple");
        list.add("Banana");
        list.add("Cherry");

        // Step 3: Print the ArrayList
        System.out.println("ArrayList: " + list);

        // Step 4: Access an element
        String firstElement = list.get(0);
        System.out.println("First element: " + firstElement);

        // Step 5: Remove an element
        list.remove("Banana");
        System.out.println("After removing Banana: " + list);

        // Step 6: Check the size of the ArrayList
        int size = list.size();
        System.out.println("Size of ArrayList: " + size);

        // Step 7: Iterate over the ArrayList
        System.out.println("Iterating over ArrayList:");
        for (String fruit : list) {
            System.out.println(fruit);
        }
    }
}

Explanation of Code Steps
Creating an ArrayList:
java
ArrayList<String> list = new ArrayList<>();

This line creates a new ArrayList instance that will hold String objects.
Adding Elements:
java
list.add("Apple");
list.add("Banana");
list.add("Cherry");

Here, three strings ("Apple", "Banana", "Cherry") are added to the ArrayList.
Printing the ArrayList:
java
System.out.println("ArrayList: " + list);

This prints the entire contents of the ArrayList.
Accessing an Element:
java
String firstElement = list.get(0);
System.out.println("First element: " + firstElement);

The first element (index 0) is accessed and printed.
Removing an Element:
java
list.remove("Banana");
System.out.println("After removing Banana: " + list);

The string "Banana" is removed from the ArrayList, and the updated list is printed.
Checking Size:
java
int size = list.size();
System.out.println("Size of ArrayList: " + size);

This retrieves and prints the current number of elements in the ArrayList.
Iterating Over Elements:
java
for (String fruit : list) {
    System.out.println(fruit);
}

A for-each loop is used to iterate through each element in the ArrayList and print it.
Conclusion
The ArrayList class in Java provides a flexible way to manage collections of objects with dynamic sizing capabilities. Its ease of use and built-in methods make it a powerful tool for developers when working with lists in Java applications.